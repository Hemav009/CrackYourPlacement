class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> temp;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            // Skipping duplicates for i
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                // Skipping duplicates for j
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                int m = j + 1;
                int k = n - 1;
                while (m < k) {
                    long long sum = (long long)nums[i] + nums[j] + nums[k] + nums[m]; // Use long long for sum
                    if (sum == target) {
                        vector<int> a = {nums[i], nums[j], nums[k], nums[m]};
                        temp.push_back(a);
                        // Skipping duplicates for m
                        while (m < k && nums[m] == nums[m + 1]) m++;
                        // Skipping duplicates for k
                        while (m < k && nums[k] == nums[k - 1]) k--;
                        m++;
                        k--;
                    }
                    // If sum is less than target, increment left pointer
                    else if (sum < target) {
                        m++;
                    }
                    // If sum is greater than target, decrement right pointer
                    else {
                        k--;
                    }
                }
            }
        }
        return temp;
    }
};
